"""
Sample Oracle database population script.
This creates the same ecommerce schema as the SQLite version but for Oracle.
"""

import oracledb
from datetime import datetime

def populate_oracle_database(user, password, dsn):
    """Populate Oracle database with sample ecommerce data."""
    
    try:
        # Connect to Oracle
        connection = oracledb.connect(user=user, password=password, dsn=dsn)
        cursor = connection.cursor()
        print(f"Connected to Oracle database: {dsn}")
        
        # Drop tables if they exist (for clean setup)
        drop_tables = [
            "DROP TABLE order_items CASCADE CONSTRAINTS",
            "DROP TABLE orders CASCADE CONSTRAINTS", 
            "DROP TABLE products CASCADE CONSTRAINTS",
            "DROP TABLE customers CASCADE CONSTRAINTS"
        ]
        
        for drop_sql in drop_tables:
            try:
                cursor.execute(drop_sql)
                print(f"Dropped existing table: {drop_sql.split()[2]}")
            except oracledb.DatabaseError:
                pass  # Table doesn't exist, that's fine
        
        # Create customers table
        cursor.execute("""
            CREATE TABLE customers (
                customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                first_name VARCHAR2(50) NOT NULL,
                last_name VARCHAR2(50) NOT NULL,
                email VARCHAR2(100) UNIQUE NOT NULL,
                registration_date DATE DEFAULT SYSDATE,
                city VARCHAR2(50),
                country VARCHAR2(50)
            )
        """)
        print("Created customers table")
        
        # Create products table
        cursor.execute("""
            CREATE TABLE products (
                product_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                name VARCHAR2(100) NOT NULL,
                description CLOB,
                category VARCHAR2(50),
                price NUMBER(10,2) NOT NULL,
                stock_quantity NUMBER DEFAULT 0
            )
        """)
        print("Created products table")
        
        # Create orders table
        cursor.execute("""
            CREATE TABLE orders (
                order_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                customer_id NUMBER NOT NULL,
                order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                status VARCHAR2(20) DEFAULT 'pending',
                total_amount NUMBER(10,2),
                shipping_address CLOB,
                FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
            )
        """)
        print("Created orders table")
        
        # Create order_items table
        cursor.execute("""
            CREATE TABLE order_items (
                order_item_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                order_id NUMBER NOT NULL,
                product_id NUMBER NOT NULL,
                quantity NUMBER NOT NULL,
                price_per_unit NUMBER(10,2) NOT NULL,
                FOREIGN KEY (order_id) REFERENCES orders(order_id),
                FOREIGN KEY (product_id) REFERENCES products(product_id)
            )
        """)
        print("Created order_items table")
        
        # Insert sample customers
        customers_data = [
            ('Alice', 'Smith', 'alice.s@email.com', '2023-01-15', 'New York', 'USA'),
            ('Bob', 'Johnson', 'b.johnson@email.com', '2023-02-20', 'Los Angeles', 'USA'),
            ('Charlie', 'Williams', 'charlie.w@email.com', '2023-03-10', 'Chicago', 'USA'),
            ('Diana', 'Brown', 'diana.b@email.com', '2023-04-05', 'Houston', 'USA'),
            ('Ethan', 'Davis', 'ethan.d@email.com', '2023-05-12', 'Phoenix', 'USA'),
            ('Fiona', 'Miller', 'fiona.m@email.com', '2023-06-18', 'Philadelphia', 'USA'),
            ('George', 'Wilson', 'george.w@email.com', '2023-07-22', 'San Antonio', 'USA'),
            ('Hannah', 'Moore', 'hannah.m@email.com', '2023-08-30', 'San Diego', 'USA'),
            ('Ian', 'Taylor', 'ian.t@email.com', '2023-09-05', 'Dallas', 'USA'),
            ('Julia', 'Anderson', 'julia.a@email.com', '2023-10-11', 'San Jose', 'USA')
        ]
        
        cursor.executemany("""
            INSERT INTO customers (first_name, last_name, email, registration_date, city, country)
            VALUES (:1, :2, :3, TO_DATE(:4, 'YYYY-MM-DD'), :5, :6)
        """, customers_data)
        print("Inserted customers")
        
        # Insert sample products
        products_data = [
            ('Wireless Headphones', 'High-quality wireless headphones with noise cancellation', 'Electronics', 99.99, 50),
            ('Running Shoes', 'Comfortable running shoes for daily exercise', 'Apparel', 79.99, 30),
            ('Coffee Maker', 'Programmable coffee maker with 12-cup capacity', 'Home Goods', 129.99, 15),
            ('Smartphone', 'Latest model smartphone with advanced features', 'Electronics', 699.99, 25),
            ('Yoga Mat', 'Non-slip yoga mat for home workouts', 'Sports', 29.99, 40),
            ('Bluetooth Speaker', 'Portable bluetooth speaker with excellent sound quality', 'Electronics', 59.99, 35),
            ('Office Chair', 'Ergonomic office chair with lumbar support', 'Home Goods', 199.99, 20),
            ('Wireless Mouse', 'Ergonomic wireless mouse for computers', 'Accessories', 24.99, 60),
            ('Phone Case', 'Protective phone case with built-in stand', 'Accessories', 14.99, 100),
            ('USB Cable', 'High-speed USB charging cable', 'Accessories', 9.99, 200)
        ]
        
        cursor.executemany("""
            INSERT INTO products (name, description, category, price, stock_quantity)
            VALUES (:1, :2, :3, :4, :5)
        """, products_data)
        print("Inserted products")
        
        # Insert sample orders
        orders_data = [
            (1, '2023-11-01 10:30:00', 'completed', 179.98, '123 Main St, New York, NY'),
            (2, '2023-11-02 14:15:00', 'shipped', 699.99, '456 Oak Ave, Los Angeles, CA'),
            (3, '2023-11-03 09:45:00', 'completed', 159.98, '789 Pine Rd, Chicago, IL'),
            (4, '2023-11-04 16:20:00', 'pending', 24.99, '321 Elm St, Houston, TX'),
            (5, '2023-11-05 11:30:00', 'shipped', 89.98, '654 Maple Dr, Phoenix, AZ')
        ]
        
        cursor.executemany("""
            INSERT INTO orders (customer_id, order_date, status, total_amount, shipping_address)
            VALUES (:1, TO_TIMESTAMP(:2, 'YYYY-MM-DD HH24:MI:SS'), :3, :4, :5)
        """, orders_data)
        print("Inserted orders")
        
        # Insert sample order items
        order_items_data = [
            (1, 1, 2, 99.99),  # Order 1: 2 Wireless Headphones
            (1, 2, 1, 79.99),  # Order 1: 1 Running Shoes
            (2, 4, 1, 699.99), # Order 2: 1 Smartphone
            (3, 3, 1, 129.99), # Order 3: 1 Coffee Maker
            (3, 5, 1, 29.99),  # Order 3: 1 Yoga Mat
            (4, 8, 1, 24.99),  # Order 4: 1 Wireless Mouse
            (5, 6, 1, 59.99),  # Order 5: 1 Bluetooth Speaker
            (5, 5, 1, 29.99)   # Order 5: 1 Yoga Mat
        ]
        
        cursor.executemany("""
            INSERT INTO order_items (order_id, product_id, quantity, price_per_unit)
            VALUES (:1, :2, :3, :4)
        """, order_items_data)
        print("Inserted order items")
        
        # Commit all changes
        connection.commit()
        print("All data committed successfully!")
        
        # Display summary
        cursor.execute("SELECT COUNT(*) FROM customers")
        customers_count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM products") 
        products_count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM orders")
        orders_count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM order_items")
        order_items_count = cursor.fetchone()[0]
        
        print(f"\nDatabase populated with:")
        print(f"  - {customers_count} customers")
        print(f"  - {products_count} products")
        print(f"  - {orders_count} orders")
        print(f"  - {order_items_count} order items")
        
    except oracledb.DatabaseError as e:
        print(f"Oracle database error: {e}")
        raise
    except Exception as e:
        print(f"Error: {e}")
        raise
    finally:
        if 'connection' in locals():
            connection.close()
            print("Database connection closed.")

if __name__ == "__main__":
    import sys
    import getpass
    
    if len(sys.argv) < 3:
        print("Usage: python populate_oracle_db.py <username> <dsn>")
        print("Example: python populate_oracle_db.py myuser localhost:1521/XE")
        sys.exit(1)
    
    username = sys.argv[1]
    dsn = sys.argv[2]
    password = getpass.getpass(f"Enter password for {username}: ")
    
    populate_oracle_database(username, password, dsn) 